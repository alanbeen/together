/**
 * This class is generated by jOOQ
 */
package com.huaxia.generated.tables;


import com.huaxia.generated.Keys;
import com.huaxia.generated.Test;
import com.huaxia.generated.tables.records.ViewRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class View extends TableImpl<ViewRecord> {

    private static final long serialVersionUID = 1343476216;

    /**
     * The reference instance of <code>test.view</code>
     */
    public static final View VIEW = new View();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewRecord> getRecordType() {
        return ViewRecord.class;
    }

    /**
     * The column <code>test.view.view_id</code>.
     */
    public final TableField<ViewRecord, Integer> VIEW_ID = createField("view_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>test.view.view_name</code>.
     */
    public final TableField<ViewRecord, String> VIEW_NAME = createField("view_name", org.jooq.impl.SQLDataType.CHAR.length(50).nullable(false), this, "");

    /**
     * Create a <code>test.view</code> table reference
     */
    public View() {
        this("view", null);
    }

    /**
     * Create an aliased <code>test.view</code> table reference
     */
    public View(String alias) {
        this(alias, VIEW);
    }

    private View(String alias, Table<ViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private View(String alias, Table<ViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ViewRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VIEW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ViewRecord> getPrimaryKey() {
        return Keys.KEY_VIEW_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ViewRecord>> getKeys() {
        return Arrays.<UniqueKey<ViewRecord>>asList(Keys.KEY_VIEW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public View as(String alias) {
        return new View(alias, this);
    }

    /**
     * Rename this table
     */
    public View rename(String name) {
        return new View(name, null);
    }
}
